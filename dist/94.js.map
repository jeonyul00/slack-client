{"version":3,"file":"94.js","mappings":"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","sources":["webpack://slack-client/./pages/DirectMessage/styles.tsx","webpack://slack-client/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & img {\n    margin-right: 5px;\n  }\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Container, Header } from '@pages/DirectMessage/styles';\nimport gravatar from 'gravatar';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\nimport makeSection from '@utils/makeSection';\nimport Scrollbars from 'react-custom-scrollbars-2';\nimport useSWRInfinite from 'swr/infinite';\nimport useSocket from '@hooks/useSocket';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const [socket] = useSocket(workspace);\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR(`/api/users`, fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n\n  // 등록된 채팅 가져오기, 페이지네이션(reverse)\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IDM[]>( // useSWRInfinite : 새로운 데이터를 가져올 때 2차원 배열로 관리됨\n    (index: number) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n\n  const isEmpty = chatData?.[0]?.length === 0; // 마지막 데이터\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  const onSubmitForm = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        /* \n          Optimistic UI : 사용자의 동작에 대한 피드백을 실제 서버 응답을 기다리지 않고 빠르게 보여주는 방식\n          먼저 ui를 바꾼 후 통신, 사용자 경험 개선\n          이 코드의 경우, 채팅을 쓰면 통신 후에 글이 보이므로 느림 (딜레이) => 글을 먼저 게시한 후 통신 시작\n          특징 : 안전성 < 사용성 : 이미 글을 게시했는데 통신 실패의 경우가 있을 수 있다 : revelidate하면 됨 : 서버에 검증\n        */\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, { content: chat })\n          .then(() => {\n            scrollbarRef.current?.scrollToBottom();\n          })\n          .catch((e: Error) => {\n            console.log(e);\n          });\n      }\n    },\n    [chat, workspace, chatData, myData, userData, id, mutateChat, setChat],\n  );\n\n  const onMessage = useCallback((data: IDM) => {\n    // 남의 id\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            // 내 스크롤이 150 이상일 떄 남이 채팅을 쳐도 스크롤바가 안 내려가도록 설정\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 최하단 포커스\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n  return (\n    <Container>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList\n        chatSections={chatSections}\n        ref={scrollbarRef}\n        setSize={setSize}\n        isEmpty={isEmpty}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["Container","_styled","target","name","styles","Header","_chatData$","_chatData","_ref","_useParams","useParams","workspace","id","socket","_slicedToArray","useSocket","userData","useSWR","concat","fetcher","data","myData","_useInput2","useInput","chat","onChangeChat","setChat","_useSWRInfinite","useSWRInfinite","index","chatData","mutateChat","mutate","setSize","isEmpty","length","isReachingEnd","scrollbarRef","useRef","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","_chatData$0$","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","_scrollbarRef$current","current","scrollToBottom","axios","_scrollbarRef$current2","catch","console","log","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","setTimeout","_scrollbarRef$current3","useEffect","on","off","_scrollbarRef$current4","chatSections","makeSection","apply","reverse","React","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"sourceRoot":""}