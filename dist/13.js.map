{"version":3,"file":"13.js","mappings":"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","sources":["webpack://slack-client/./components/ChatBox/styles.tsx","webpack://slack-client/./components/ChatBox/index.tsx","webpack://slack-client/./components/Chat/styles.tsx","webpack://slack-client/./components/Chat/index.tsx","webpack://slack-client/./components/ChatList/styles.tsx","webpack://slack-client/./components/ChatList/index.tsx","webpack://slack-client/./utils/makeSection.ts"],"sourcesContent":["import styled, { StyledComponent } from '@emotion/styled';\nimport { MentionsInput, MentionsInputProps } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\n// export const MentionsTextarea = styled(MentionsInput)`\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n\n  & strong {\n    background: skyblue;\n  }\n\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n\n  & img {\n    margin-right: 5px;\n  }\n\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\nimport autosize from 'autosize';\nimport { Mention } from 'react-mentions';\nimport { useParams } from 'react-router';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport gravatar from 'gravatar';\nimport { SuggestionDataItem } from 'react-mentions';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\n\nconst ChatBox: React.FC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams();\n  const { data: userData } = useSWR('/api/users', fetcher);\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    // autosize\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n  const onKeyDownChat = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === 'Enter' && e.shiftKey === false) {\n        onSubmitForm(e);\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focused: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focused}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyDown={onKeyDownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor // 커서보다 위쪽으로\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((value) => ({ id: value.id, display: value.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #eee;\n  }\n\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n\n    & > b {\n      margin-right: 5px;\n    }\n\n    & > span {\n      font-size: 12px;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { ChatWrapper } from '@components/Chat/styles';\nimport { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\nimport gravatar from 'gravatar';\nimport React, { FC, memo, useMemo } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport regexifyString from 'regexify-string';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\n/*\n  컴포넌트를 캐싱 할 때 : memo : 프롭스가 바뀌면 갱신 : *얕은 비교\n  값을 캐싱 할 때 : useMemo\n*/\n\nconst Chat: FC<Props> = memo(({ data }) => {\n  const user = 'Sender' in data ? data.Sender : data.User;\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n\n  const result = useMemo(\n    () =>\n      regexifyString({\n        input: data.content,\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n        // 매칭되는 값\n        decorator(match, index): JSX.Element {\n          const arr = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!; // id\n          if (arr) {\n            return (\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                @{arr[1]}\n              </Link>\n            );\n          }\n          return <br key={index} />;\n        },\n      }),\n    [data.content, workspace],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n});\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { useCallback, forwardRef, MutableRefObject } from 'react';\nimport { Scrollbars, positionValues } from 'react-custom-scrollbars-2';\n\ninterface Props {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n  isEmpty: boolean;\n}\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback(\n    (values: positionValues) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        setSize((prevSize) => prevSize + 1).then(() => {\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n          if (current) {\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [scrollRef, isReachingEnd, setSize],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\n/*\n  날짜별 그룹화\n*/\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","_styled","target","name","styles","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","_ref","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","userData","useSWR","fetcher","data","memberData","concat","textareaRef","useRef","useEffect","current","autosize","onKeyDownChat","useCallback","e","key","shiftKey","renderSuggestion","suggestion","search","highlightedDisplay","index","focused","React","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","allowSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","display","className","trim","type","disabled","ChatWrapper","Chat","memo","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","Link","to","dayjs","createdAt","format","ChatZone","Section","StickyHeader","forwardRef","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","Scrollbars","autoHide","ref","onScrollFrame","Object","entries","_ref2","_ref3","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}