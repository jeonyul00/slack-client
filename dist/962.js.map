{"version":3,"file":"962.js","mappings":"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","sources":["webpack://slack-client/./components/InviteChannelModal/index.tsx","webpack://slack-client/./components/Modal/styles.tsx","webpack://slack-client/./components/Modal/index.tsx","webpack://slack-client/./hooks/useSocket.ts","webpack://slack-client/./layouts/Workspace/styles.tsx","webpack://slack-client/./components/Menu/styles.tsx","webpack://slack-client/./components/Menu/index.tsx","webpack://slack-client/./components/CreateChannelModal/index.tsx","webpack://slack-client/./components/InviteWorkspaceModal/index.tsx","webpack://slack-client/./components/EachDM/index.tsx","webpack://slack-client/./components/DMList/styles.tsx","webpack://slack-client/./components/DMList/index.tsx","webpack://slack-client/./components/EachChannel/index.tsx","webpack://slack-client/./components/ChannelList/index.tsx","webpack://slack-client/./layouts/Workspace/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n\n  const { mutate: revalidateMembers } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [channel, newMember, revalidateMembers, setNewMember, setShowInviteChannelModal, workspace],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateModal, CloseModalButton } from '@components/Modal/styles';\nimport React, { FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n}\n\nconst Modal: FC<PropsWithChildren<Props>> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import { useCallback } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\nconst baseURl = 'http://localhost:3095';\nconst sockets: { [key: string]: Socket } = {}; // 각 대화방 마다 따로 연결 관리를 해야하기 때문에 객체로 관리\n\nconst useSocket = (workspace?: string): [Socket | undefined, () => void] => {\n  const disconnect = useCallback(() => {\n    if (workspace && sockets[workspace]) {\n      sockets[workspace].disconnect(); // 연결 종료\n      delete sockets[workspace]; // 해 당 연결 객체 삭제\n    }\n  }, [workspace]);\n\n  if (!workspace) {\n    return [undefined, disconnect];\n  }\n\n  if (!sockets[workspace]) {\n    // transports: ['websocket'] : 최초 테스트 http 연결을 건너뛰고 websocket 바로 연결\n    sockets[workspace] = io(`${baseURl}/ws-${workspace}`, { transports: ['websocket'] }); // 서버와 연결\n  }\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n\n  & img {\n    display: flex;\n  }\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n\n    &.selected {\n      color: white;\n    }\n  }\n\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n\n  & h2 {\n    padding-left: 20px;\n  }\n\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateMenu, CloseModalButton } from '@components/Menu/styles';\nimport React, { CSSProperties, FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: (props: React.MouseEvent) => void;\n  style: CSSProperties;\n  closeButton?: boolean;\n}\n\nconst Menu: FC<PropsWithChildren<Props>> = ({ closeButton, style, show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation(); // stopPropagation : 바깥쪽 영역을 눌렀을 때 닫히도록 : 이벤트버블링 방지\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div onClick={stopPropagation} style={style}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\n\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: (flag: boolean) => void;\n}\nconst CreateChannelModal: FC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\n  const params = useParams<{ workspace?: string }>();\n  const { workspace } = params;\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  const { data: userData } = useSWR<IUser | false>('/api/users', fetcher);\n  const { mutate: revalidateChannel } = useSWR<IChannel[]>(\n    userData ? `/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const onCreateChannel = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newChannel || !newChannel.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels`, {\n          name: newChannel,\n        })\n        .then(() => {\n          revalidateChannel();\n          setShowCreateChannelModal(false);\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newChannel, revalidateChannel, setNewChannel, setShowCreateChannelModal, workspace],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널 이름</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button>생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { mutate: revalidateMember } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMember();\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember, workspace, revalidateMember, setShowInviteWorkspaceModal, setNewMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\n\ninterface Props {\n  member: IUser;\n  isOnline: boolean;\n}\nconst EachDM: FC<Props> = ({ member, isOnline }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const date = localStorage.getItem(`${workspace}-${member.id}`) || 0;\n  const { data: count, mutate } = useSWR<number>(\n    userData ? `/api/workspaces/${workspace}/dms/${member.id}/unreads?after=${date}` : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/dm/${member.id}`) {\n      mutate(0);\n    }\n  }, [mutate, location.pathname, workspace, member]);\n\n  return (\n    <NavLink\n      key={member.id}\n      className={({ isActive }) => (isActive ? 'selected' : 'not')}\n      to={`/workspace/${workspace}/dm/${member.id}`}\n    >\n      <i\n        className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n          isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n        }`}\n        aria-hidden=\"true\"\n        data-qa=\"presence_indicator\"\n        data-qa-presence-self=\"false\"\n        data-qa-presence-active=\"false\"\n        data-qa-presence-dnd=\"false\"\n      />\n      <span className={count && count > 0 ? 'bold' : undefined}>{member.nickname}</span>\n      {member.id === userData?.id && <span> (나)</span>}\n      {(count && count > 0 && <span className=\"count\">{count}</span>) || null}\n    </NavLink>\n  );\n};\n\nexport default EachDM;\n","import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","import EachDM from '@components/EachDM';\nimport { CollapseButton } from '@components/DMList/styles';\nimport { IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport useSocket from '@hooks/useSocket';\n\nconst DMList = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  useEffect(() => {\n    console.log('DMList: workspace 바꼈다', workspace);\n    setOnlineList([]);\n  }, [workspace]);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n    console.log('socket on dm', socket?.hasListeners('dm'), socket);\n\n    return () => {\n      // console.log('socket off dm', socket?.hasListeners('dm'));\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            return <EachDM key={member.id} member={member} isOnline={isOnline} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\n\ninterface Props {\n  channel: IChannel;\n}\nconst EachChannel: FC<Props> = ({ channel }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const date = localStorage.getItem(`${workspace}-${channel.name}`) || 0;\n  const { data: count, mutate } = useSWR<number>(\n    userData ? `/api/workspaces/${workspace}/channels/${channel.name}/unreads?after=${date}` : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/channel/${channel.name}`) {\n      mutate(0);\n    }\n  }, [mutate, location.pathname, workspace, channel]);\n\n  return (\n    <NavLink\n      key={channel.name}\n      className={({ isActive }) => (isActive ? 'selected' : 'not')}\n      to={`/workspace/${workspace}/channel/${channel.name}`}\n    >\n      <span className={count !== undefined && count > 0 ? 'bold' : undefined}># {channel.name}</span>\n      {count !== undefined && count > 0 && <span className=\"count\">{count}</span>}\n    </NavLink>\n  );\n};\n\nexport default EachChannel;\n","import { CollapseButton } from '@components/DMList/styles';\nimport EachChannel from '@components/EachChannel';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\n\ninterface Props {\n  channelData?: IChannel[];\n  userData?: IUser;\n}\n\nconst ChannelList: FC<Props> = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 캐시 저장 시간 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map((channel) => {\n            return <EachChannel key={channel.id} channel={channel} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","import fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Navigate, Route, Routes, useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport {\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceModal,\n  WorkspaceName,\n  WorkspaceWrapper,\n  Workspaces,\n} from './styles';\nimport gravatar from 'gravatar';\nimport loadable from '@loadable/component';\nimport Menu from '@components/Menu';\nimport { Link } from 'react-router-dom';\nimport { WorkspaceButton } from './styles';\nimport { AddButton } from './styles';\nimport Modal from '@components/Modal';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport useInput from '@hooks/useInput';\nimport { toast } from 'react-toastify';\nimport CreateChannelModal from '@components/CreateChannelModal';\nimport { IChannel } from '@typings/db';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport DMList from '@components/DMList';\nimport ChannelList from '@components/ChannelList';\nimport useSocket from '@hooks/useSocket';\n\nconst Channel = loadable(() => import('@pages/Channel'));\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\n\ninterface responesType {\n  id: number;\n  name: string;\n  url: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Workspace: React.FC = () => {\n  const { workspace } = useParams();\n  const { data: userData, mutate } = useSWR('/api/users', fetcher);\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [socket, disconnect] = useSocket(workspace);\n\n  useEffect(() => {\n    if (channelData && userData && socket) {\n      // 워크스페이스, 채널이 로딩 완료되었을 때 서버에 로그인했음을 알리는 이벤트\n      socket.emit('login', { id: userData.id, channels: channelData.map((value) => value.id) });\n    }\n  }, [socket, channelData, userData]);\n\n  useEffect(() => {\n    // 워크스페이스가 바뀔 때 clean up, 클라이언트에서 소켓 연결을 종료하는 함수\n    return () => {\n      disconnect();\n    };\n  }, [workspace, disconnect]);\n\n  const onLogout = useCallback(() => {\n    axios.post('/api/users/logout', null, { withCredentials: true }).then(() => {\n      mutate(false);\n    });\n  }, [mutate]);\n\n  const onClickUserProfile = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation(); // 이벤트 버블링 방지\n    setShowUserMenu((prev) => !prev);\n  }, []);\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) return;\n      if (!newUrl || !newUrl.trim()) return;\n      axios\n        .post(\n          '/api/workspaces',\n          {\n            workspace: newWorkspace,\n            url: newUrl,\n          },\n          { withCredentials: true },\n        )\n        .then((response) => {\n          mutate(response.data);\n          setShowCreateWorkspaceModal(false);\n          setNewUrl('');\n          setNewWorkspace('');\n        })\n        .catch((error) => {\n          console.log(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl],\n  );\n\n  const toggleWorkspaceModal = useCallback(() => {\n    setShowWorkspaceModal((prev) => !prev);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowInviteWorkspaceModal(true);\n  }, []);\n\n  if (!userData) {\n    return <Navigate to={'/login'} />;\n  }\n\n  return (\n    <div>\n      <Header>\n        slack\n        <RightMenu>\n          <span onClick={onClickUserProfile}>\n            <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\n            {showUserMenu && (\n              <Menu show={true} onCloseModal={onClickUserProfile} style={{ right: 0, top: 38 }}>\n                <ProfileModal>\n                  <img src={gravatar.url(userData.nickname, { s: '36px', d: 'retro' })} alt={userData.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{userData.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </span>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData.Workspaces?.map((value: responesType) => {\n            return (\n              <Link key={value.id} to={`/workspace/${value.url}/channel/일반`}>\n                <WorkspaceButton>{value.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n              </Link>\n            );\n          })}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceModal}>\n            {userData?.Workspaces.find((value: { url: string }) => value.url === workspace)?.name}\n          </WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>slack</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onLogout}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Routes>\n            <Route path=\"channel/:channel\" element={<Channel />} />\n            <Route path=\"dm/:id\" element={<DirectMessage />} />\n          </Routes>\n        </Chats>\n      </WorkspaceWrapper>\n      {showCreateWorkspaceModal && (\n        <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n          <form onSubmit={onCreateWorkspace}>\n            <Label id=\"workspace-label\">\n              <span>워크스페이스 이름</span>\n              <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n            </Label>\n            <Label id=\"workspace-url-label\">\n              <span>워크스페이스 url</span>\n              <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\n            </Label>\n            <Button type=\"submit\">생성하기</Button>\n          </form>\n        </Modal>\n      )}\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowCreateChannelModal}\n      />\n    </div>\n  );\n};\n\nexport default Workspace;\n"],"names":["_ref","show","onCloseModal","setShowInviteChannelModal","_useParams","useParams","workspace","channel","_useInput2","useInput","newMember","onChangeNewMember","setNewMember","userData","useSWR","fetcher","data","revalidateMembers","concat","mutate","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","_error$response","console","dir","toast","response","position","React","Modal","onSubmit","Label","id","Input","value","onChange","Button","type","CreateModal","_styled","target","name","styles","CloseModalButton","children","stopPropagation","onClick","sockets","disconnect","io","transports","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","Menu","closeButton","style","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","revalidateChannel","onCreateChannel","setShowInviteWorkspaceModal","revalidateMember","member","isOnline","location","useLocation","dedupingInterval","date","localStorage","getItem","_useSWR2","count","useEffect","pathname","NavLink","key","className","_ref2","isActive","to","nickname","CollapseButton","collapse","memberData","socket","_slicedToArray","useSocket","_useState2","useState","channelCollapse","setChannelCollapse","_useState4","onlineList","setOnlineList","toggleChannelCollapse","prev","log","on","hasListeners","off","map","includes","EachDM","channelData","EachChannel","Channel","loadable","DirectMessage","_userData$Workspaces","_userData$Workspaces$","_useSWR","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","_useInput4","newUrl","onChangeNewUrl","setNewUrl","_useState6","showWorkspaceModal","setShowWorkspaceModal","_useState8","showCreateChannelModal","_useState10","showInviteWorkspaceModal","_useState12","showInviteChannelModal","_useSocket2","emit","channels","onLogout","withCredentials","onClickUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","Link","slice","toUpperCase","find","left","ChannelList","DMList","Routes","Route","path","element","CreateChannelModal","InviteWorkspaceModal","InviteChannelModal","Navigate"],"sourceRoot":""}